@using ReceiptApp.Components.Dialogs
@using ReceiptApp.Services
@using ReceiptApp.Model
@using System.Globalization
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq
@inject ReceiptQuery Query
@inject ReceiptCommand Command
@inject ReceiptExport ExportService
@inject IJSRuntime JS
@inject NavigationManager NavManager

@attribute [Microsoft.AspNetCore.Authorization.Authorize]

@implements IDisposable

@if (isLoading)
{
    <Loader LoadingDetail="Receipt" />
}
else
{
    @if (isUpdating)
    {
        <section class="position-absolute w-100">
            <Loader ShowText="false" />
            <span class="sr-only">Saving changes</span>
        </section>
    }
    <EditForm EditContext="@editContext" OnSubmit="@HandleSubmit">

        <div class="position-relative">
            <p class="commands">

                <span class="d-block d-sm-none">
                    <DeleteReceiptDialogButton OnConfirm="@Delete" DialogLabel=false />
                </span>
                <button type="button" class="btn btn-link btn-excel" title="Excel export" @onclick="@(e=>HandleExport())">
                    <i class="fas fa-file-excel" aria-hidden="true"></i>
                    <span class="sr-only">
                        Export
                    </span>
                </button>
                <span>
                    <ReceiptImageDialogButton ReceiptId="@ReceiptId" />
                </span>

                <button type="submit" class="btn btn-link" disabled="@isUpdating">
                    <i class="fas fa-save" aria-hidden="true"></i>
                    <span class="sr-only">
                        Save
                    </span>
                </button>
            </p>
        </div>
        <div class="receipt-container">

            <section class="edit-form">
                <DataAnnotationsValidator />
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

                <ReceiptFields ReceiptDetails="receiptDetails" />

                <hr />
                <section class="bottom-commands d-none d-sm-block">
                    <div class="row text-center">
                        <div class="col-sm-12">
                            <DeleteReceiptDialogButton OnConfirm="@Delete" />
                        </div>
                    </div>
                </section>
            </section>
        </div>
    </EditForm>
}

<UnsavedChangesDialog DialogIsOpen="@ShowConfirmExitDialog" OnConfirm="@ConfirmUnsaved" />

@code {

    [Parameter]
    public string ReceiptId { get; set; } = "";

    private bool AnyUnsavedChanges = false;

    private ReceiptDetails? receiptDetails;

    private bool isLoading = false;
    private bool isUpdating = false;
    private EditContext? editContext;

    private bool ShowImage = false;

    private bool ShowFullPage = true;
    private bool ShowConfirmExitDialog = false;
    private string NextLocation = "";

    private IDisposable? registration;


    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            registration =
                NavManager.RegisterLocationChangingHandler(OnLocationChanging);
        }
    }

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (AnyUnsavedChanges)
        {
            ShowConfirmExitDialog = true;
            NextLocation = context.TargetLocation;
            context.PreventNavigation();
            StateHasChanged();
        }

        return ValueTask.CompletedTask;
    }

    private void ConfirmUnsaved()
    {
        AnyUnsavedChanges = false;
        NavManager.NavigateTo(NextLocation);
    }

    protected override async Task OnParametersSetAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        ShowImage = false;
        if (string.IsNullOrEmpty(ReceiptId)) return;

        isLoading = true;
        receiptDetails = await Query.GetReceipt(ReceiptId);
        if (receiptDetails is not null)
        {
            editContext = new(receiptDetails);

            editContext.OnFieldChanged += (o, e) => AnyUnsavedChanges = true;
        }
        isLoading = false;
    }

    private async Task Delete()
    {
        if (receiptDetails is not null)
        {
            await Command.Delete(receiptDetails.Id);
            NavManager.NavigateTo("/receipts");
        }
    }

    private void HandleShowImage()
    {
        ShowImage = !ShowImage;
    }

    private async Task HandleExport()
    {
        if (receiptDetails is not null)
        {
            await ExportService.ToExcel(receiptDetails);
        }
    }

    private async Task HandleSubmit()
    {
        if (receiptDetails is not null && editContext is not null && editContext.Validate())
        {
            isUpdating = true;

            await Command.Save(ReceiptId, receiptDetails);

            AnyUnsavedChanges = false;

            isUpdating = false;
        }
        else
        {

        }
    }

    void IDisposable.Dispose()
    {
        if (editContext is not null)
        {
            editContext.OnFieldChanged -= (o, e) => AnyUnsavedChanges = true;
        }

        registration?.Dispose();
    }
}
