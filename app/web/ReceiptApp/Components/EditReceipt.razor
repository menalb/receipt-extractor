@using ReceiptApp.Services
@using ReceiptApp.Model
@using System.Globalization
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq
@inject ReceiptQuery Query
@inject ReceiptCommand Command
@inject ReceiptExport ExportService
@inject IJSRuntime JS
@inject NavigationManager NavManager
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

@if (isLoading)
{
    <Loader LoadingDetail="Receipt" />
}
else
{
    <EditForm EditContext="@editContext" class="" OnSubmit="@HandleSubmit">

        <p class="commands">
            @if (!ShowImage)
            {
                <button type="button"
                class="btn btn-primary"
                title="Show receipt image"
                @onclick="@HandleShowImage"
                disabled="@isUpdating">
                    <i class="fas fa-image" aria-hidden="true"></i>
                    <span class="sr-only">
                        Show Image
                    </span>
                </button>
            }
            else
            {
                <button type="button"
                class="btn btn-primary"
                title="Show receipt image"
                @onclick="@HandleShowImage"
                disabled="@isUpdating">
                    <i class="fas fa-eye-slash" aria-hidden="true"></i>
                    <span class="sr-only">
                        Hide Image
                    </span>
                </button>
            }
            <span class="top-commands">
                <button type="button" class="btn btn-primary btn-excel" title="Excel export" @onclick="@(e=>HandleExport())">
                    <i class="fas fa-file-excel" aria-hidden="true"></i>
                    <span class="sr-only">
                        Export
                    </span>
                </button>
                @if (isUpdating)
                {
                    <span class="spinner-border text-info" role="status" title="Saving changes">
                        <span class="sr-only">Saving changes</span>
                    </span>
                }
                <button type="submit" class="btn btn-primary" disabled="@isUpdating">
                    <i class="fas fa-save" aria-hidden="true"></i>
                    <span class="sr-only">
                        Save
                    </span>
                </button>
            </span>
        </p>
        <div class="receipt-container">

            <ReceiptImage ReceiptId="@ReceiptId" Visible="@ShowImage" />

            <section class="edit-form">
                <DataAnnotationsValidator />
                <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

                <ReceiptFields ReceiptDetails="receiptDetails" />

                <hr />
                <section class="commands">
                    <div class="row text-center">
                        <div class="col-sm-12">
                            <button type="button" class="btn btn-primary" @onclick="@(e=>Delete())" title="Delete Receipt">
                                <i class="fas fa-trash-alt" aria-hidden="true"></i> Delete Receipt
                            </button>
                        </div>
                    </div>
                </section>
            </section>
        </div>
    </EditForm>
}

@code {

    [Parameter]
    public string ReceiptId { get; set; } = "";
    private ReceiptDetails? receiptDetails;

    private bool isLoading = false;
    private EditContext? editContext;
    private bool isUpdating = false;


    private bool ShowImage = false;

    private bool ShowFullPage = true;

    protected override async Task OnParametersSetAsync()
    {
        await Init();
    }
    private async Task Init()
    {
        ShowImage = false;
        if (string.IsNullOrEmpty(ReceiptId)) return;

        isLoading = true;
        receiptDetails = await Query.GetReceipt(ReceiptId);
        if (receiptDetails is not null)
        {
            editContext = new(receiptDetails);
        }
        isLoading = false;
    }

    private async Task Delete()
    {
        if (receiptDetails is not null)
        {
            await Command.Delete(receiptDetails.Id);
            NavManager.NavigateTo("/receipts");
        }
    }

    private void HandleShowImage()
    {
        ShowImage = !ShowImage;
    }

    private async Task HandleExport()
    {
        if (receiptDetails is not null)
        {
            await ExportService.ToExcel(receiptDetails);
        }
    }

    private async Task HandleSubmit()
    {
        if (receiptDetails is not null && editContext is not null && editContext.Validate())
        {
            isUpdating = true;

            await Command.Save(ReceiptId, receiptDetails);

            isUpdating = false;
        }
        else
        {

        }
    }
}
