@using ReceiptApp.Components;
@using ReceiptApp.Services;
@inject ReceiptLoaderStateService state
@inject ImageService Uploader

<button class="btn btn-primary" type="button" title="Add Receipt" @onclick="()=> OpenDialog()">
    <i class="fas fa-plus" aria-hidden="true"></i>
</button>

@if (DialogIsOpen)
{
    <Dialog Caption="Add Receipt"
        OnClose="@OnDialogClose"
        Type="Dialog.Category.Okay">
        <Body>
            <div class="text-center">
                <p>
                    <InputFile disabled="@IsUploading"
                           aria-disabled="@IsUploading"
                           OnChange="@LoadFiles"
                           class="custom-file-input"
                           id="inputFile" />
                    <label disabled="@IsUploading"
                       aria-disabled="@IsUploading"
                       title="Upload receipt file"
                       for="inputFile"
                       class="btn btn-primary upload-button @(IsUploading ? "disabled" : "")"
                       role="button">
                        <i class="fas fa-upload" aria-hidden="true"></i>Upload Receipt
                    </label>
                </p>
                @if (!IsUploading)
                {
                    <p>
                        OR
                    </p>
                    <p>
                        <NavLink title="Add Receipt using the receipt form"
                         class="btn btn-primary"
                         href=@($"register-receipt")>
                            <i class="fas fa-plus" aria-hidden="true"></i>
                            Manually fill out
                        </NavLink>
                    </p>
                }
                @if (IsUploading)
                {
                    <Loader ShowText="false" />
                    <p class="loading">
                        @message
                    </p>
                }
                @if (errorMessage != null)
                {
                    <p class="error"><em>@errorMessage</em></p>
                }
            </div>
        </Body>
    </Dialog>
}
@code {
    private bool DialogIsOpen = false;
    private string message = "";
    private bool IsUploading = false;
    public string errorMessage { get; set; } = "";

    private void OpenDialog()
    {
        IsUploading = false;
        DialogIsOpen = true;

        ClearMessage();
        ClearErrorMessage();
    }

    private void OnDialogClose(bool isOk)
    {
        if (isOk)
        {

        }
        DialogIsOpen = false;
    }

    private void SetUploading()
    {
        IsUploading = true;
        message = "Uploading receipt...";
    }

    private void ClearMessage()
    {
        message = string.Empty;
    }

    private void ClearErrorMessage()
    {
        errorMessage = string.Empty;
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        ClearErrorMessage();
        SetUploading();

        try
        {
            string uploadedFileName = await Uploader.Upload(e.File);
            state.NotifyLoadingReceiptChanged(this, uploadedFileName);

            await Task.Delay(3000);

            ClearMessage();
            IsUploading = false;
            message = @"Your file has been uploaded and is now being processed.
            In the meantime, you can continue using the app.";
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            errorMessage = ex.Message;
        }
    }
}
