@using ReceiptApp.Model;
@using System.Globalization;
@using ReceiptApp.Services;

<section>
    <div class="form-row">
        <label for="Tags" class="col-sm-2 col-form-label">Tags:</label>
        <div class="col-sm-10">
            <InputText id="Tags" @bind-Value="Tags" @onblur="UpdateTags" class="form-control" />
            @foreach (var tag in defaultTags)
            {
                <button type="button" class="btn btn-primary" @onclick="@(e=>SetTag(tag))" title="@tag">
                    <i class="@TagsService.GetKindIcon(tag)"></i>
                </button>
            }
        </div>
    </div>

    <div class="form-row">
        <label for="Day" class="col-sm-2 col-form-label">Day:</label>
        <div class="col-sm-10">
            <InputDate id="Day" @bind-Value="Day" @onblur="UpdateDay" class="form-control" />
        </div>
    </div>
    <div class="form-row">
        <label for="Total" class="col-sm-2 col-form-label">Total:</label>
        <div class="col-sm-10">
            <InputNumber id="Total" @bind-Value="Total" @bind-Value:format="F2" @onblur="UpdateTotal"
                         class="form-control" />
        </div>
    </div>
    <div class="form-row">
        <span class="col-sm-2">Real Total:</span>
        <span class="col-sm-10">
            <span class="@PriceAlterCss()">
                @RealTotal
            </span>
        </span>
    </div>

    <h3>Shop</h3>
    <div class="form-row">
        <label for="ShopName" class="col-sm-2 col-form-label">Name:</label>
        <div class="col-sm-10">
            <InputText id="ShopName" @bind-Value="ReceiptDetails.Shop.Name" class="form-control" />
        </div>
    </div>
    <div class="form-row">
        <label for="ShopOwner" class="col-sm-2 col-form-label">Owner:</label>
        <div class="col-sm-10">
            <InputText id="ShopOwner" @bind-Value="ReceiptDetails.Shop.Owner" class="form-control" />
        </div>
    </div>
    <div class="form-row">
        <label for="ShopAddress" class="col-sm-2 col-form-label">Address:</label>
        <div class="col-sm-10">
            <InputText id="ShopAddress" @bind-Value="ReceiptDetails.Shop.Address" class="form-control" />
        </div>
    </div>
    <div class="form-row">
        <label for="ShopCity" class="col-sm-2 col-form-label">City:</label>
        <div class="col-sm-10">
            <InputText id="ShopCity" @bind-Value="ReceiptDetails.Shop.City" class="form-control" />
        </div>
    </div>
    <div class="form-row">
        <label for="ShopPhone" class="col-sm-2 col-form-label">Phone:</label>
        <div class="col-sm-10">
            <InputText id="ShopPhone" @bind-Value="ReceiptDetails.Shop.Phone" class="form-control" />
        </div>
    </div>
    <div class="form-row">
        <label for="ShopVat" class="col-sm-2 col-form-label">VAT:</label>
        <div class="col-sm-10">
            <InputText id="ShopVat" @bind-Value="ReceiptDetails.Shop.VAT" class="form-control" />
        </div>
    </div>
</section>

<h3>
    <span>
        Items
    </span>
    <button type="button" class="btn btn-primary" @onclick="@(e=>AppendEmpty())" title="Add Receipt Item">
        <i class="fas fa-plus"></i>
    </button>
</h3>
<section>
    @foreach (var receiptItem in ReceiptItems)
    {
        <div class="form-row receipt-items">            
            <div class="col-sm-4">
                <InputText id="ItemName" @bind-Value="receiptItem.Item.Name" class="form-control" />
            </div>
            <label for="ItemVat" class="col-sm-1 col-form-label">VAT:</label>
            <div class="col-sm-2">
                <InputNumber id="ItemVat" @bind-Value="receiptItem.Item.VAT" @bind-Value:format="F2"
                         class="form-control" />
            </div>
            <label for="ItemPrice" class="col-sm-1 col-form-label">Price:</label>
            <div class="col-sm-2">
                <InputNumber id="ItemPrice" @bind-Value="receiptItem.Item.Price" @bind-Value:format="F2"
                         @onblur="UpdateTotal" class="form-control" />
            </div>
            <div class="col-sm-12 col-md-1 text-center">
                <button type="button" class="btn btn-primary" @onclick="@(e=>Remove(receiptItem.Index))"
                    title="Remove">
                    <i class="far fa-trash-alt"></i>
                </button>
            </div>
        </div>

    }
</section>

@code {
    [Parameter]
    public ReceiptDetails ReceiptDetails { get; set; } = new ReceiptDetails();
    private DateTime Day { get; set; } = DateTime.Now;
    private string[] defaultTags = new string[] { "shop", "bar", "pharmacy" };

    private string Tags { get; set; } = "";
    private decimal Total
    {
        get => ReceiptDetails is not null && ReceiptDetails.Total.HasValue ? ReceiptDetails.Total.Value : 0M;
        set
        {
            if (ReceiptDetails is not null)
            {
                ReceiptDetails.Total = value;
            }
        }
    }

    private const string DateFormat = "yyyy-MM-dd";
    private decimal RealTotal = 0M;
    private IEnumerable<ReceiptItem> ReceiptItems = new List<ReceiptItem>();

    private void SetTag(string tag)
    {
        if (string.IsNullOrWhiteSpace(Tags))
        {
            Tags = tag;
        }
        else
        {
            Tags += ";" + tag;
        }
        UpdateTags();
    }

    protected override void OnParametersSet()
    {
        Init();
    }

    private void Init()
    {

        if (ReceiptDetails is not null)
        {
            CultureInfo provider = CultureInfo.InvariantCulture;
            if (!string.IsNullOrEmpty(ReceiptDetails.Day))
            {
                Day = DateTime.ParseExact(ReceiptDetails.Day, DateFormat, provider);
            }
            Tags = ReceiptDetails.Tags != null ? string.Join(";", ReceiptDetails.Tags).ToLowerInvariant() : string.Empty;

            ReceiptItems = ReceiptDetails.Items is not null ?
            ReceiptDetails.Items.Select((item, index) => new ReceiptItem(index, item)) :
            new List<ReceiptItem>();

            UpdateTotal();
        }
    }

    private void UpdateTags()
    {
        ReceiptDetails.Tags = string.IsNullOrEmpty(Tags) ? new List<string>() : Tags.Split(";");
    }

    private void UpdateDay()
    {
        ReceiptDetails.Day = Day.ToString(DateFormat);
    }

    private void UpdateTotal()
    {
        RealTotal = ReceiptItems.Sum(ri => ri.Item.Price);
        ReceiptDetails.Items = ReceiptItems.Select(receiptItem => receiptItem.Item);
    }

    private void AppendEmpty()
    {
        var maxIndex = ReceiptItems.Any() ? ReceiptItems.Max(item => item.Index) : 1;
        ReceiptItems = ReceiptItems.Append(new ReceiptItem(maxIndex + 1, new Model.ReceiptItem()));
    }

    private void Remove(int receiptItemIndex)
    {
        ReceiptItems = ReceiptItems.Where(item => item.Index != receiptItemIndex);
        UpdateTotal();
    }

    private string PriceAlterCss()
    {
        return ReceiptDetails != null && RealTotal != ReceiptDetails.Total ? "text-warning" : "text-success";

    }
    public record ReceiptItem(int Index, Model.ReceiptItem Item);
}
