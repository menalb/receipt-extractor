@using System.Net.WebSockets
@using System.Text
@inject Services.TokenService tokenService
@inject Services.ReceiptLoaderStateService state
@inject WebSocketApiConfig websocketConfig
@implements IDisposable

@if (webSocket.State == WebSocketState.Open && ShowLog)
{
    <NavLink title="Receipt processed. Go to receipt"
         role="alert"
         aria-atomic="true"
         aria-live="polite"
         class="nav-link"
         href=@($"receipt/{ReceiptId}")>
        <i class="fas fa-bell" aria-hidden="true"></i>
        Receipt processed!
    </NavLink>
}

@code {

    CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    ClientWebSocket webSocket = new ClientWebSocket();
    private bool ShowLog { get; set; } = false;

    string ReceiptId = "";

    string wssUri { get => websocketConfig.Uri; }

    protected override void OnInitialized()
    {
        state.OnLoadingReceiptChanged += async (c, s) => await LoadingReceiptChanged(c, s);
    }

    private async Task LoadingReceiptChanged(ComponentBase component, string fileName)
    {
        if (webSocket == null || webSocket.State != WebSocketState.Open)
        {
            Console.WriteLine("Connecting");
            await Connect();
        }
    }

    async Task Connect()
    {
        webSocket = new ClientWebSocket();
        disposalTokenSource = new CancellationTokenSource();
        var token = await tokenService.GetIdToken();
        Console.WriteLine(wssUri + "?idToken=" + token);
        await webSocket.ConnectAsync(new Uri(wssUri + "?idToken=" + token), disposalTokenSource.Token);
        _ = ReceiveLoop();
    }

    async Task ReceiveLoop()
    {
        var buffer = new ArraySegment<byte>(new byte[1024]);
        while (!disposalTokenSource.IsCancellationRequested)
        {
            // Note that the received block might only be part of a larger message. If this applies in your scenario,
            // check the received.EndOfMessage and consider buffering the blocks until that property is true.
            // Or use a higher-level library such as SignalR.
            var received = await webSocket.ReceiveAsync(buffer, disposalTokenSource.Token);
            var receivedAsText = Encoding.UTF8.GetString(buffer.Array ?? new byte[] { }, 0, received.Count);

            var message = System.Text.Json.JsonSerializer.Deserialize<NotificationMessage>(receivedAsText);
            ShowLog = true;
            if (message is not null && !string.IsNullOrEmpty(message.receiptId))
            {
                await NotifyUI(message.receiptId);
            }
        }
    }

    private async Task NotifyUI(string receiptId)
    {
        ReceiptId = receiptId;
        StateHasChanged();
        Console.WriteLine($"Received: {receiptId}\n");

        state.NotifyLoadedReceiptChanged(this, receiptId);
        await Task.Delay(5000);
        ShowLog = false;
        StateHasChanged();
    }

    private void LoadedTest()
    {
        state.NotifyLoadedReceiptChanged(this, "123A");
    }

    async Task Disconnect()
    {
        disposalTokenSource.Cancel();
        await webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
    }

    public void Dispose()
    {
        state.OnLoadingReceiptChanged -= async (c, s) => await LoadingReceiptChanged(c, s);
        disposalTokenSource.Cancel();
        _ = webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
    }

    public class NotificationMessage
    {
        public string userId { get; set; } = "";
        public string receiptId { get; set; } = "";
    }
}
