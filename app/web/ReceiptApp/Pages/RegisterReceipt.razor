@page "/register-receipt"
@using ReceiptApp.Components
@using ReceiptApp.Services
@using ReceiptApp.Model
@using System.Globalization
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq
@inject ReceiptCommand Command
@inject ReceiptExport ExportService
@inject IJSRuntime JS
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm EditContext="@editContext" class="" OnSubmit="@HandleSubmit">

        <p class="commands">
            <button type="button" class="btn btn-primary btn-excel" title="Excel export" @onclick="@(e=>HandleExport())">
                <i class="fas fa-file-excel"></i>
            </button>
            @if (isUpdating)
            {
                <span class="spinner-border text-info" role="status" title="Saving changes">
                    <span class="sr-only">Saving changes</span>
                </span>
            }
            <button type="submit" class="btn btn-primary" disabled="@isUpdating">Save</button>
        </p>
        <h2>Receipt</h2>
        <DataAnnotationsValidator />
        <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

        <ReceiptFields ReceiptDetails="receiptDetails" />

    </EditForm>
}

@code {
    private ReceiptDetails? receiptDetails = new ReceiptDetails
        {
            Day = DateTimeHelper.GetToday(),
            Shop = new Shop(),
            Items = new List<Model.ReceiptItem>()
        };

    private bool isLoading = false;
    private EditContext? editContext;
    private bool isUpdating = false;

    protected override void OnInitialized()
    {
        if (receiptDetails is not null)
        {
            editContext = new(receiptDetails);
        }
    }

    private async Task HandleExport()
    {
        if (receiptDetails is not null)
        {
            await ExportService.ToExcel(receiptDetails);
        }
    }

    private async Task HandleSubmit()
    {
        if (receiptDetails is not null && editContext is not null && editContext.Validate())
        {
            isUpdating = true;

            await Command.Register(receiptDetails);

            isUpdating = false;
        }
        else
        {

        }
    }
}
