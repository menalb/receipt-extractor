@page "/"
@page "/receipts"
@using Model
@using Services
@using System.Globalization
@using System.Threading
@using ReceiptApp.Components
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TokenService TokenService
@inject ReceiptQuery Query
@inject UploaderService Uploader
@inject ReceiptLoaderStateService state
@implements IDisposable
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<h1 class="receipts-header">
    <span class="d-none d-sm-block"> Receipts</span>
</h1>
<div class="file-input-group input-group mb-2">
    <div class="custom-file">
        <ReceiptApp.Components.Dialogs.FileUploadDialog />
    </div>
    <span class="header-actions">
        <NavLink title="Add Receipt" class="btn btn-primary" href=@($"register-receipt")>
            <i class="fas fa-plus"></i>
        </NavLink>
        <button type="button" class="btn btn-primary" title="Refresh Receipts list" @onclick="@(e=>Refresh())">
            <i class="fas fa-sync-alt"></i>
        </button>
    </span>
</div>

@if (loadingMessage != null)
{
    <p class="loading"><em>@loadingMessage</em></p>
}

@if (errorMessage != null)
{
    <p class="error"><em>@errorMessage</em></p>
}

<div class="mb-2">
    <input id="monthFilter" alt="Filter by month" type="month"
           @oninput="@(e=>FilterByMonth(e.Value?.ToString() ?? string.Empty))" class="form-control col-xs-8 col-sm-4"
           placeholder="Select month" />
</div>

<hr />
@if (receipts == null)
{
    <p class="loading"><em>Loading...</em></p>
}
else
{
    <ReceiptsStatus Receipts="receipts" SelectedDay="OnSelectedDay" />

    @if (selectedDay.HasValue)
    {
        <div>
            <span class="badge badge-pill badge-dark">
                @selectedDay.Value.ToLongDateString()
                <button class="badge badge-light" @onclick="ResetSelectedDay">x</button>
            </span>
        </div>
    }

    <ReceiptsList Receipts="tableReceipts" />
}

@code {    
    public string MonthFilter { get; set; } = "";
    public string? loadingMessage { get; set; }
    public string errorMessage { get; set; } = "";
    private IEnumerable<ReceiptListItem> all_receipts = new List<ReceiptListItem>();
    private IEnumerable<ReceiptListItem> receipts = new List<ReceiptListItem>();

    private IEnumerable<ReceiptListItem> tableReceipts = new List<ReceiptListItem>();
    private DateTime? selectedDay;

    private DateTime? MonthYear = null;

    protected override async Task OnInitializedAsync()
    {
        state.OnLoadedReceiptChanged += async (component, receiptId) => await Refresh();

        ClearMessage();
        ClearErrorMessage();

        await Refresh();
    }

    public async Task Refresh()
    {
        CultureInfo provider = CultureInfo.InvariantCulture;

        all_receipts = (await Query.GetAll(MonthYear))
        .Select(r => new ReceiptListItem(
        r.Id ?? "",
        r.JobId ?? "",
        DateTime.ParseExact(r.Day ?? "", "yyyy-MM-dd", provider),
        r.Tags ?? new string[] { }, r.Shop ?? "",
        r.Total)
        ).OrderByDescending(r => r.day);

        UpdatePageData();

        StateHasChanged();
    }

    private void UpdatePageData()
    {
        receipts = all_receipts.Select(r => r);
        tableReceipts = receipts;
    }

    private async Task FilterByMonth(string month)
    {
        loadingMessage = string.Empty;
        if (!string.IsNullOrWhiteSpace(month))
        {
            MonthFilter = month;
            if (DateTime.TryParse(month, out DateTime monthYear))
            {
                MonthYear = monthYear;
                await Refresh();
            }
        }
        else
        {
            MonthFilter = string.Empty;

            UpdatePageData();
        }
    }

    private void OnSelectedDay(DateTime day)
    {
        if (selectedDay.HasValue && selectedDay.Value == day)
        {
            selectedDay = null;
            tableReceipts = all_receipts;
        }
        else
        {
            tableReceipts = all_receipts.Where(r => r.day == day);
            selectedDay = day;
        }
        StateHasChanged();
    }

    private void ResetSelectedDay()
    {
        selectedDay = null;
        UpdatePageData();
    }

    private void SetProcessing()
    {
        loadingMessage = "Processing receipt...";
    }

    private void ClearMessage()
    {
        loadingMessage = string.Empty;
    }

    private void ClearErrorMessage()
    {
        errorMessage = string.Empty;
    }

    void IDisposable.Dispose()
    {
        state.OnLoadedReceiptChanged -= async (component, receiptId) => await Refresh();
    }
}
