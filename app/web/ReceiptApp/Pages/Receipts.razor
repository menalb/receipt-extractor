@page "/"
@page "/receipts"
@using Model
@using Services
@using System.Globalization
@using System.Threading
@using ReceiptApp.Components
@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TokenService TokenService
@inject ReceiptQuery Query
@inject ReceiptLoaderStateService state
@inject NavigationManager NavManager
@inject Services.BrowserResizeService BrowserResize;

@implements IDisposable
@attribute [Microsoft.AspNetCore.Authorization.Authorize]

<h1 class="receipts-header">
    <span class="d-none d-sm-block"> Receipts</span>
</h1>
<div class="mb-2 commands">
    <span>
        <ReceiptApp.Components.Dialogs.AddReceiptDialog />
    </span>
    <span class="header-actions">
        <button type="button" class="btn btn-primary" title="Refresh Receipts list" @onclick="@(e=>Refresh())">
            <i class="fas fa-sync-alt"></i>
        </button>
    </span>
</div>

@if (loadingMessage != null)
{
    <p class="loading"><em>@loadingMessage</em></p>
}

@if (errorMessage != null)
{
    <p class="error"><em>@errorMessage</em></p>
}

<div class="mb-2">
    <input id="monthFilter" value="@(MonthFilter.ToString("yyyy-MM"))" alt="Filter by month" type="month"
           class="form-control col-xs-8 col-sm-4"
           @oninput="@(e=>FilterByMonth(e.Value?.ToString() ?? string.Empty))"
           placeholder="Select month" />
</div>

<hr />

@if (receipts == null)
{
    <Loader LoadingDetail="Receipts" />
}
else
{
    <ReceiptsStatus Receipts="receipts" SelectedDay="OnSelectedDay" />

    @if (selectedDay.HasValue)
    {
        <div>
            <span class="badge badge-pill badge-dark">
                @selectedDay.Value.ToLongDateString()
                <button class="badge badge-light" @onclick="ResetSelectedDay">x</button>
            </span>
        </div>
    }

    <div class="row mb-5">
        <div class="col-xs-12 col-md-6">
            <ReceiptsList Receipts="tableReceipts" OnSelectedReceipt="SelectReceipt" />
        </div>
        <div class="col-md-6 d-none d-md-block edit-receipt">
            @if (!string.IsNullOrEmpty(SelectedReceiptId) && Size >= ScreenSize.MD)
            {
                <div class="edit-receipt-content">
                    <EditReceipt ReceiptId="@SelectedReceiptId" />
                </div>
            }
        </div>
    </div>
}

@code {
    private DateTime MonthFilter = DateTime.Now.AddDays(-30);
    public string? loadingMessage { get; set; }
    public string errorMessage { get; set; } = "";
    private IEnumerable<ReceiptListItem> all_receipts = new List<ReceiptListItem>();
    private IEnumerable<ReceiptListItem> receipts = new List<ReceiptListItem>();

    private IEnumerable<ReceiptListItem> tableReceipts = new List<ReceiptListItem>();
    private DateTime? selectedDay;
    
    private string? SelectedReceiptId = null;
    private ScreenSize Size;

    protected override async Task OnInitializedAsync()
    {
        state.OnLoadedReceiptChanged += async (component, receiptId) => await Refresh();

        ClearMessage();
        ClearErrorMessage();

        BrowserResize.Init();

        BrowserResize.OnScreenResize += (c, s) => OnResize(s);

        await Refresh();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            OnResize(await BrowserResize.GetScreenSize());
        }
    }

    public async Task Refresh()
    {
        CultureInfo provider = CultureInfo.InvariantCulture;

        all_receipts = (await Query.GetAll(MonthFilter))
        .Select(r => new ReceiptListItem(
        r.Id ?? "",
        r.JobId ?? "",
        DateTime.ParseExact(r.Day ?? "", "yyyy-MM-dd", provider),
        r.Tags ?? new string[] { }, r.Shop ?? "",
        r.Total)
        ).OrderByDescending(r => r.day);

        UpdatePageData();

        StateHasChanged();
    }

    private void UpdatePageData()
    {
        receipts = all_receipts.Select(r => r);
        tableReceipts = receipts;
    }

    private async Task FilterByMonth(string month)
    {
        loadingMessage = string.Empty;
        if (!string.IsNullOrWhiteSpace(month))
        {             
            if (DateTime.TryParse(month, out DateTime monthYear))
            {                
                MonthFilter= monthYear;
                await Refresh();
            }
        }
        else
        {
            UpdatePageData();
        }
    }

    private void OnSelectedDay(DateTime day)
    {
        if (selectedDay.HasValue && selectedDay.Value == day)
        {
            selectedDay = null;
            tableReceipts = all_receipts;
        }
        else
        {
            tableReceipts = all_receipts.Where(r => r.day == day);
            selectedDay = day;
        }
        SelectedReceiptId = string.Empty;
        StateHasChanged();
    }

    private void ResetSelectedDay()
    {
        selectedDay = null;
        UpdatePageData();
    }

    private void SelectReceipt(string id)
    {
        if (Size >= ScreenSize.MD)
        {
            SelectedReceiptId = id;
        }
        else
        {
            NavManager.NavigateTo($"receipt/{id}");
        }
    }

    private void SetProcessing()
    {
        loadingMessage = "Processing receipt...";
    }

    private void ClearMessage()
    {
        loadingMessage = string.Empty;
    }

    private void ClearErrorMessage()
    {
        errorMessage = string.Empty;
    }

    private void OnResize(ScreenSize size)
    {
        Size = size;
        StateHasChanged();
    }

    void IDisposable.Dispose()
    {
        state.OnLoadedReceiptChanged -= async (component, receiptId) => await Refresh();
        BrowserResize.OnScreenResize -= (c, s) => OnResize(s);
    }    
}
